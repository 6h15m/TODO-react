{"version":3,"sources":["components/TodoTemplate.js","components/TodoInsert.js","components/TodoListItem.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoTemplate","children","className","TodoInsert","onInsert","useState","value","setValue","onChange","useCallback","e","target","onSubmit","preventDefalut","placeholder","type","TodoListItem","todo","onRemove","onToggle","style","id","text","checked","cn","onClick","React","memo","prevProps","nextProps","TodoList","todos","rowRenderer","index","key","width","height","rowCount","length","rowHeight","list","outline","createRabbitTodos","todoReducer","action","concat","filter","map","App","useReducer","undefined","dispatch","nextId","useRef","current","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73fba639.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoTemplate.scss';\r\n\r\nconst TodoTemplate = ({ children }) => {\r\n    return (\r\n        <div className=\"TodoTemplate\">\r\n            <div className=\"app-title\">토도 🐰</div>\r\n            <div className=\"content\">{children}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoTemplate;","import React, { useState, useCallback } from 'react';\r\nimport { MdAdd } from 'react-icons/md';\r\nimport './TodoInsert.scss';\r\n\r\nconst TodoInsert = ({ onInsert }) => {\r\n    const [value, setValue] = useState('');\r\n\r\n    const onChange = useCallback(e => {\r\n        setValue(e.target.value);\r\n    }, []);\r\n\r\n    const onSubmit = useCallback(\r\n        e => {\r\n            onInsert(value);\r\n            setValue(''); // value 값 초기화\r\n\r\n            // submit 이벤트는 브라우저에서 새로고침을 발생시킵니다.\r\n            // 이를 방지하기 위해 이 함수를 호출합니다.\r\n            e.preventDefalut();\r\n        },\r\n        [onInsert, value],\r\n    );\r\n\r\n    return (\r\n        <form className=\"TodoInsert\" onSubmit={onSubmit}>\r\n            <input\r\n                placeholder=\"토끼가 오늘 할 일은?\"\r\n                value={value}\r\n                onChange={onChange}\r\n            />\r\n            <button type=\"submit\">\r\n                <MdAdd />\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default TodoInsert;","import React from 'react';\r\nimport {\r\n    MdCheckBoxOutlineBlank,\r\n    MdCheckBox,\r\n    MdRemoveCircleOutline,\r\n} from 'react-icons/md';\r\nimport cn from 'classnames';\r\nimport './TodoListItem.scss';\r\n\r\nconst TodoListItem = ({ todo, onRemove, onToggle, style }) => {\r\n    const { id, text, checked } = todo;\r\n\r\n    return (\r\n        <div className=\"TodoListItem-virtualized\" style={style}>\r\n            <div className=\"TodoListItem\">\r\n                <div className={cn('checkbox', { checked })} onClick={() => onToggle(id)}>\r\n                    {checked ? <MdCheckBox /> : <MdCheckBoxOutlineBlank />}\r\n                    <div className=\"text\">{text}</div>\r\n                </div>\r\n                <div className=\"remove\" onClick={() => onRemove(id)}>\r\n                    <MdRemoveCircleOutline />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(\r\n    TodoListItem,\r\n    (prevProps, nextProps) => prevProps.todo === nextProps.todo,\r\n);","import React, { useCallback } from 'react';\r\nimport { List } from 'react-virtualized';\r\nimport TodoListItem from './TodoListItem';\r\nimport './TodoList.scss';\r\n\r\nconst TodoList = ({ todos, onRemove, onToggle }) => {\r\n    const rowRenderer = useCallback(\r\n        ({ index, key, style }) => {\r\n            const todo = todos[index];\r\n            return (\r\n                <TodoListItem\r\n                    todo={todo}\r\n                    key={key}\r\n                    onRemove={onRemove}\r\n                    onToggle={onToggle}\r\n                    style={style}\r\n                />\r\n            );\r\n        },\r\n        [onRemove, onToggle, todos],\r\n    );\r\n    return (\r\n        <List\r\n            className=\"TodoList\"\r\n            width={512} // 전체 크기\r\n            height={513} // 전체 높이\r\n            rowCount={todos.length} // 항목 개수\r\n            rowHeight={57} // 항목 높이\r\n            rowRenderer={rowRenderer} // 항목을 렌더링할 때 쓰는 함수\r\n            list={todos} // 배열\r\n            style={{ outline: 'none' }} // List에 기본 적용되는 outline 스타일 제거\r\n        />\r\n    );\r\n};\r\n\r\nexport default React.memo(TodoList);","import React, { useReducer, useRef, useCallback } from 'react';\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoInsert from './components/TodoInsert';\nimport TodoList from './components/TodoList';\n\nfunction createRabbitTodos() {\n  return [\n    {\n      id: 1,\n      text: '끝내주게 풀 뜯기 🌿',\n      checked: true,\n    },\n    {\n      id: 2,\n      text: '간지철철 숨쉬기 💨',\n      checked: true,\n    },\n    {\n      id: 3,\n      text: '고양이 피해 숨기 😼',\n      checked: false,\n    },\n  ];\n}\n\nfunction todoReducer(todos, action) {\n  switch (action.type) {\n    case 'INSERT': // 새로 추가\n      // { type: 'INSERT', todo: { id: 1, text: 'todo', checked: false } }\n      return todos.concat(action.todo);\n    case 'REMOVE': // 제거\n      // { type: 'REMOVE', id: 1 }\n      return todos.filter(todo => todo.id !== action.id);\n    case 'TOGGLE': // 토글\n      // { type: 'TOGGLE', id: 1 }\n      return todos.map(todo =>\n        todo.id === action.id ? { ...todo, checked: !todo.checked } : todo,\n      );\n    default:\n      return todos;\n  }\n}\n\nconst App = () => {\n  const [todos, dispatch] = useReducer(todoReducer, undefined, createRabbitTodos);\n\n  // 고윳값으로 사용될 id\n  // ref를 사용하여 변수 담기\n  const nextId = useRef(4);\n\n  const onInsert = useCallback(text => {\n    const todo = {\n      id: nextId.current,\n      text,\n      checked: false,\n    };\n    dispatch({ type: 'INSERT', todo });\n    nextId.current += 1; // nextId 1씩 더하기\n  },\n    [todos],\n  );\n\n  const onRemove = useCallback(id => {\n    dispatch({ type: 'REMOVE', id });\n  }, []);\n\n  const onToggle = useCallback(id => {\n    dispatch({ type: 'TOGGLE', id });\n  }, []);\n\n  return (\n    <TodoTemplate>\n      <TodoInsert onInsert={onInsert} />\n      <TodoList todos={todos} onRemove={onRemove} onToggle={onToggle} />\n    </TodoTemplate>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}